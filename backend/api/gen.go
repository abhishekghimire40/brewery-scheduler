// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ScheduleResponse defines model for ScheduleResponse.
type ScheduleResponse struct {
	Message string `json:"message"`
	Week    string `json:"week"`
}

// GetScheduleParams defines parameters for GetSchedule.
type GetScheduleParams struct {
	Week openapi_types.Date `form:"week" json:"week"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /schedule)
	GetSchedule(c *gin.Context, params GetScheduleParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetSchedule operation middleware
func (siw *ServerInterfaceWrapper) GetSchedule(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScheduleParams

	// ------------- Required query parameter "week" -------------

	if paramValue := c.Query("week"); paramValue != "" {
	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument week is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "week", c.Request.URL.Query(), &params.Week)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter week: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSchedule(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/schedule", wrapper.GetSchedule)
}
